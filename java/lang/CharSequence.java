/*
 * @(#)CharSequence.java	1.10 10/03/23
 *
 * Копирайт (c) 2006, Oracle и/или его филиалы. Все права защищены.
 * ORACLE PROPRIETARY/CONFIDENTIAL. Использовать в соответствии с лицензией.
 */

package java.lang;


/**
 * <tt>CharSequence</tt> это читабельная последовательность значений {@code char}.
 * Этот интерфейс предоставляет унифицированный доступ только для чтения к 
 * самым различным видам последовательностей {@code char}-ов.
 * Значение {@code char} представляет символ в <i>Основной многоязычной матрице (Basic
 * Multilingual Plane, BMP)</i> или суррогат. Смотрите <a
 * href="Character.html#unicode">Представление символов Юникода</a> для подробностей.
 *
 * <p> Этот интерфейс не уточняет общее соглашение методов {@link
 * java.lang.Object#equals(java.lang.Object) equals} и {@link
 * java.lang.Object#hashCode() hashCode}. Результат сравнения двух объектов, 
 * реализующих <tt>CharSequence</tt> поэтому, вообще говоря, не определен.
 * Оба объекта могут быть реализованы разными классами и нет никаких гарантий,
 * что каждый класс будет способен к сравнению своих экземпляров на эквивалентность
 * с таковыми другого. Поэтому неуместно использовать произвольные экземпляры
 * <tt>CharSequence</tt> как элементы в множестве или ключи в отображении
 * (map).
 *
 * @author Mike McCloskey
 * @version 1.10 10/03/23
 * @since 1.4
 * @spec JSR-51
 */

public interface CharSequence {

    /**
     * Возвращает длину этой последовательности символов.  Длина - это
     * число 16-битных {@code char}-ов в последовательности.
     *
     * @return  число символов ({@code char}-ов) в этой последовательности.
     */
    int length();

    /**
     * Возвращает символ ({@code char}) по указанному индексу. Индекс лежит 
     * в диапазоне от 0 до <tt>length() - 1</tt>. Первый символ ({@code char})
     * последовательности расположен по индексу 0, следующий по индексу 1, 
     * и так далее, как при индексации массива.
     *
     * <p>Если символ ({@code char}) по указанному индексу является
     * <a href="Character.html#unicode">суррогатом</a>, возвращается суррогатное
     * значение.
     *
     * @param   index   индекс символа ({@code char}), который мы хотим получить.
     *
     * @return  указанное значение символа ({@code char}).
     *
     * @throws  IndexOutOfBoundsException
     *          если аргумент <tt>index</tt> отрицательный или не меньше,
     *          чем <tt>length()</tt>.
     */
    char charAt(int index);

    /**
     * Возвращает новый объект {@code CharSequence}, являющийся подпоследовательностью
     * этой последовательности. Подпоследовательность начинается с символа
     * по указанному индексу и заканчивается на символе с индексом <tt>end - 1</tt>.
     * Длина (в символах, т.е. {@code char}-ах) возвращаемой последовательности
     * равна <tt>end - start</tt>, поэтому, если <tt>start == end</tt>,
     * то вернется пустая последовательность.
     * 
     * @param   start   начальный индекс, включительно.
     * @param   end     конечный индекс, не включительно.
     *
     * @return  указанная подпоследовательность.
     *
     * @throws  IndexOutOfBoundsException
     *          если <tt>start</tt> или <tt>end</tt> отрицательны,
     *          если <tt>end</tt> больше, чем <tt>length()</tt>,
     *          или если <tt>start</tt> больше, чем <tt>end</tt>.
     */
    CharSequence subSequence(int start, int end);

    /**
     * Возвращает строку, содержащую символы в этой последовательности в том
     * же самом порядке, как в этой последовательности. Длина строки будет
     * равна длине этой последовательности.
     *
     * @return  строка, содержащая точно такую же последовательность символов.
     */
    public String toString();

}
