/*
 * @(#)ThreadDeath.java	1.17 10/03/23
 *
 * Копирайт (c) 2006, Oracle и/или его филиалы. Все права защищены.
 * ORACLE PROPRIETARY/CONFIDENTIAL. Использовать в соответствии с лицензией.
 */

package java.lang;

/**
 * Инстанция <code>ThreadDeath</code> кидается в потоке жертвы, когда
 * вызывается метод <code>stop</code> с нулевым количеством аргуметнов 
 * в классе <code>Thread</code>. 
 * <p>
 * Приложение должно перехватывать инстанции этого класса только если оно
 * должно произвести очистку после асинхронного завершения. Если 
 * <code>ThreadDeath</code> перехватывается методом, важно повторно
 * бросить его, чтобы поток фактически умер. 
 * <p>
 * Верхнеуровневый обработчик ошибок не распечатывает сообщение, если 
 * <code>ThreadDeath</code> никогда не перехватывается. 
 * <p>
 * Класс <code>ThreadDeath</code> специально подклассирует 
 * <code>Error</code>, а не <code>Exception</code>, даже при том, что
 * он возникает при "нормальной работе", потому что многие приложения
 * перехватывают все вхождения <code>Exception</code> и затем отменяют 
 * исключение.
 *
 * @author unascribed
 * @version 1.17, 03/23/10
 * @see     java.lang.Thread#stop()
 * @since   JDK1.0
 */

public class ThreadDeath extends Error {}
