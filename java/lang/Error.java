/*
 * @(#)Error.java	1.18 10/03/23
 *
 * Копирайт (c) 2006, Oracle и/или его филиалы. Все права защищены.
 * ORACLE PROPRIETARY/CONFIDENTIAL. Использовать в соответствии с лицензией.
 */

package java.lang;

/**
 * <code>Error</code> является подклассом <code>Throwable</code>, который 
 * сообщает о серъезной проблеме, которую грамотное приложение не должно
 * пытаться перехватить. Большинство таких ошибок являются ненормальными 
 * состояниями. Ошибка <code>ThreadDeath</code>, хотя и "нормальное" состояние,
 * также является подклассом <code>Error</code>, потому что большинство 
 * приложений не должны пытаться перехватывать ее. 
 * <p>
 * Метод не требует объявления в его <code>throws</code> предложении
 * каких-либо подклассов <code>Error</code>, которые могут быть брошены 
 * во время выполнения метода, но не перехвачены, так как эти ошибки
 * являются ненормальными состояниями и никогда не должны возникать. 
 *
 * @author  Frank Yellin
 * @version 1.18, 03/23/10
 * @see     java.lang.ThreadDeath
 * @since   JDK1.0
 */
public class Error extends Throwable {
    static final long serialVersionUID = 4980196508277280342L;

    /**
     * Конструирует новую ошибку с <code>null</code> как ее 
     * уточняющим сообщением. Причина не инициализируется и может 
     * впоследствии быть инициализирована вызовом {@link #initCause}.
     */
    public Error() {
        super();
    }

    /**
     * Конструирует новую ошибку с указанным уточняющим сообщением. 
     * Причина не инициализируется и может впоследствии быть 
     * инициализирована вызовом {@link #initCause}.
     *
     * @param   message   уточняющее сообщение. Уточняющее сообщение сохраняется 
     *          для последующего получения методом {@link #getMessage()}.
     */
    public Error(String message) {
        super(message);
    }

    /**
     * Конструирует новую ошибку с указанным уточняющим собщением и причиной. 
     * <p>Заметьте, что уточняющее сообщение, ассоциированное с 
     * <code>cause</code>, автоматически <i>не</i> включается в уточняющее 
     * сообщение этой ошибки.
     *
     * @param  message уточняющее сообщение (которое сохраняется для последующего 
     *         получения методом {@link Throwable#getMessage()}).
     * @param  cause причина (которая сохраняется для последующего получения
     *         методом {@link Throwable#getCause()}). (Значение <tt>null</tt>
     *         допускается и сообщает, что причина несуществует или 
     *         неизвестна.)
     * @since  1.4
     */
    public Error(String message, Throwable cause) {
        super(message, cause);
    }

    /**
     * Конструирует новую ошибку с указанной причиной и уточняющим сообщением
     * <tt>(cause==null ? null : cause.toString())</tt> (которое обычно 
     * содержит класс и уточняющее сообщение причины (<tt>cause</tt>)). 
     * Этот конструктор полезен для ошибок, которые являются несколько
     * большим, чем обертками над другими кидаемыми объектами.
     *
     * @param  cause причина (которая сохраняется для последующего получения
     *         методом {@link #getCause()}). (Значение <tt>null</tt> допустимо,
     *         и указывает, что причина не существует или неизвестна.)
     *
     * @since  1.4
     */
    public Error(Throwable cause) {
        super(cause);
    }
}
