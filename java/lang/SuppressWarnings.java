/*
 * @(#)SuppressWarnings.java	1.5 10/03/23
 *
 * Копирайт (c) 2006, Oracle и/или его филиалы. Все права защищены.
 * ORACLE PROPRIETARY/CONFIDENTIAL. Использовать в соответствии с лицензией.
 */

package java.lang;

import java.lang.annotation.*;
import java.lang.annotation.ElementType;
import static java.lang.annotation.ElementType.*;

/**
 * Указывает, что именованные предупреждения компилятора должны быть подавлены в
 * аннотируемом элементе (и во всех программных элементах, содержащихся в аннотируемом
 * элементе). Заметьте, что множество предупреждений, подавляемых в данном элементе,
 * является надмножеством предупреждений, подавляемых во всех содержащихся элементах.
 * Например, если вы аннотируете класс для подавления одного предупреждения и аннотируете
 * метод для подавления другого, оба предупреждения будут подавлены в методе.
 *
 * <p>Как вопрос стиля, программисты должны всегда использовать эту аннотацию
 * на наиболее глубоко вложенном элементе, где она эффективна. Если вы хотите
 * подавить предупреждение в отдельном методе, вы должны анотировать этот 
 * метод, а не его класс.
 *
 * @since 1.5
 * @author Josh Bloch
 */
@Target({TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE})
@Retention(RetentionPolicy.SOURCE)
public @interface SuppressWarnings {
    /**
     * Множество предупреждений, которые могут подавлены компилятором в
     * аннотируемом элементе. Допускаются повторяющиеся имена. Второе и
     * последующие вхождения имени игнорируются. Присутствие непризнанных
     * имен предупреждений <i>не</i> является ошибкой: Компиляторы должны
     * игнорировать любые имена предупреждений, которые они не признают. 
     * Они, однако, вправе выдать предупреждение, если аннотация содержит
     * непризнанное имя предупреждения.
     *
     * <p>Производители компиляторов должны документировать имена предупреждений,
     * которые они поддерживают для этого типа аннотации. Поощряется их объединение,
     * чтобы гарантировать, что одни и те же имена работают на множестве компиляторов.
     */
    String[] value();
}
