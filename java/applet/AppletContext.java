/*
 * @(#)AppletContext.java	1.36 10/03/23
 *
 * Копирайт (c) 2006, Oracle и/или его филиалы. Все права защищены.
 * ORACLE PROPRIETARY/CONFIDENTIAL. Использовать в соответствии с лицензией.
 */

package java.applet;

import java.awt.Image;
import java.awt.Graphics;
import java.awt.image.ColorModel;
import java.net.URL;
import java.util.Enumeration;
import java.io.InputStream;
import java.io.IOException;
import java.util.Iterator;

/**
 * Этот интерфейс соответствует окружению апплета: документ, 
 * содержащий апплет и другие апплеты в том же самом
 * документе.
 * <p>
 * Методы в этом интерфейсе могут использоваться апплетом для получения
 * информации о его окружении.
 *
 * @author      Arthur van Hoff
 * @version     1.36, 03/23/10
 * @since       JDK1.0
 */
public interface AppletContext {
    /**
     * Создает аудиоклип.
     *
     * @param   url   абсолютный URL, содержащий местоположение аудиоклипа.
     * @return  аудиоклип по указанному URL.
     */
    AudioClip getAudioClip(URL url);

    /**
     * Возвращает объект <code>Image</code>, который может быть нарисован
     * на экране. Передаваемый аргумент <code>url</code> должен определять
     * абсолютный URL.
     * <p>
     * Этот метод всегда возвращает управление немедленно, независимо от того,
     * существует ли изображение. Когда апплет попытается нарисовать изображение
     * на экране, данные будут загружены. Графические примитивы, которые рисуют
     * изображение, будут инкрементально закрашивать экран.
     *
     * @param   url   абсолютный URL, содержащий местоположение изображения.
     * @return  изображение по указанному URL.
     * @see     java.awt.Image
     */
    Image getImage(URL url);

    /**
     * Находит и возвращает апплет в документе, представленный этим 
     * контекстом апплета с указанным именем. Имя может быть установлено в 
     * HTML теге с помощью атрибута <code>name</code>.
     *
     * @param   name   имя апплета.
     * @return  апплет с указанным именем или <code>null</code> если
     *          такой апплет не найден.
     */
    Applet getApplet(String name);

    /**
     * Находит все апплеты в документе, представляемые этим контекстом
     * апплета.
     *
     * @return  перечисление всех апплетов в документе, представляемом этим
     *          контекстом апплета.
     */
    Enumeration<Applet> getApplets();

    /**
     * Просит браузер или просмотрщик апплетов показать веб-страницу,
     * обозначенную аргументом <code>url</code>. Браузер или просмотрщик
     * апплетов определяют, в каком окне или фрейме отобразить веб-страницу.
     * Этот метод может игнорироваться контекстами апплетов, которые не
     * являются браузерами.
     *
     * @param   url   абсолютный URL, содержащий местоположение документа.
     */
    void showDocument(URL url);

    /**
     * Просит браузер или просмотрщик апплетов показать веб-страницу,
     * обозначенную аргументом <code>url</code>. Аргумент
     * <code>target</code> указывает, в каком HTML фрейме документ будет
     * отображен.
     * Аргумент target интерпретируется следующим образом:
     * <p>
     * <center><table border="3" summary="Аргументы target и их описание">
     * <tr><th>Аргумент target</th><th>Описание</th></tr>
     * <tr><td><code>"_self"</code></td>  <td>Показывает в окне и фрейме, которое
     *                                        содержит апплет.</td></tr>
     * <tr><td><code>"_parent"</code></td><td>Показывает в родительском фрейме апплета. If
     *                                        Если фрейм апплета не имеет родительского,
     *                                        то работает так же, как "_self".</tr>
     * <tr><td><code>"_top"</code></td>   <td>Показывает в фрейме верхнего уровня окна апплета.
     *                                        Если фрейм апплета является фреймом верхнего
     *                                        уровня, то работает так же, как "_self".</td></tr>
     * <tr><td><code>"_blank"</code></td> <td>Показывает в новом, безымянном
     *                                        окне верхнего уровня.</tr>
     * <tr><td><i>name</i></td><td>Показывает в фрейме или окне, называемом <i>name</i>. Если
     *                             цель с именем <i>name</i> еще не существует, будет
     *                             создано новое окно верхнего уровня с указаным именем,
     *                             и документ будет показан там.</td></tr>
     * </table> </center>
     * <p>
     * Просмотрщик апплетов или браузер вправе игнорировать <code>showDocument</code>.
     *
     * @param   url   абсолютный URL, содержащий местоположение документа.
     * @param   target   строка, указывающая, где отобразить
     *                   страницу.
     */
    public void showDocument(URL url, String target);

    /**
     * Запрашивает отображение строкового аргумента в "статусной строке".
     * Многие браузеры и просмотрщики апплетов предоставляют такую
     * строку, где приложение может информировать пользователей
     * о своем текущем состоянии.
     *
     * @param   status   строка для отображения в статусной строке.
     */
    void showStatus(String status);

    /**
     * Ассоциирует указанный поток с указанным ключем в этом контексте 
     * апплета. Если контекст апплета уже содержал отображение по этому 
     * ключу, старое значение будет заменено. 
     * <p>
     * По причинам безопасности, отображение потоков и ключей существует для 
     * каждой базы кода (codebase). Другими словами, апплет с одной базой кода 
     * не может получить доступ к потокам, созданным апплетом с другой базой кода.
     * <p>
     * @param key ключ, с которым будет ассоциировано указанное значение.
     * @param stream поток, который будет ассоциирован с указанным ключом. Если этот 
     *               параметр равен <code>null</code>, указанный ключ удаляется 
     *               в этом контексте апплета.
     * @throws <code>IOException</code> если размер потока превышает некоторое 
     *         ограничение размера. Ограничение размера зависит от реализующего
     *         данный интерфейс.
     * @since 1.4
     */
    public void setStream(String key, InputStream stream)throws IOException;

    /**
     * Возвращает поток, для которого указанный ключ ассоциирован с этим 
     * контекстом апплета. Возвращает <tt>null</tt>, если контекст апплета 
     * не содержит потока для этого ключа. 
     * <p>
     * По причинам безопасности, отображение потоков и ключей существует для 
     * каждой базы кода (codebase). Другими словами, апплет с одной базой кода 
     * не может получить доступ к потокам, созданным апплетом с другой базой кода.
     * <p>
     * @param key ключ, для которого должен быть возвращен ассоциированный поток.
     * @return поток, который данный контекст апплета отображает на ключ
     * @since 1.4
     */
    public InputStream getStream(String key);

    /**
     * Находит все ключи потоков этого контекста апплета.
     * <p>
     * По причинам безопасности, отображение потоков и ключей существует для 
     * каждой базы кода (codebase). Другими словами, апплет с одной базой кода 
     * не может получить доступ к потокам, созданным апплетом с другой базой кода.
     * <p>
     * @return  {@link java.util.Iterator итератор} всех имен потоков в этом
     *          контексте апплета.
     * @since 1.4
     */
    public Iterator<String> getStreamKeys();
}
